{"name":"JB2A - Puzzle Setup","type":"script","author":"aGxss9fSYid62f18","img":"icons/tools/hand/saw-steel-grey.webp","scope":"global","command":"// check tiles\nconst hasTileFlag = !!Tagger.getByTag(\"jb2a_puzzle\").length;\n//console.log(hasTileFlag);\n\n// check macros\nconst hasMacroFlag = !!Array.from(game.macros).find((m) => m?.flags?.jb2a_puzzle?.delete === true);\n//console.log(hasMacroFlag);\n\n//check journal entries\nconst hasJournalFlag = !!Array.from(game.journal).find((j) => j?.data?.jb2a_puzzle?.delete === true);\n//console.log(hasJournalFlag);\n\nif (!hasTileFlag && !hasMacroFlag && !hasJournalFlag) {\n    await setupInit();\n} else {\n    const warning =\n        \"JB2A_Puzzle Warning : You have already executed this macro ! Use the Cleanup macro first if you want to start again\";\n    ui.notifications.warn(warning);\n}\n\nasync function setupInit() {\n    const music_folder = \"modules/jb2a_patreon/Library/Generic/Music_Notation\";\n    const folder = await FilePicker.browse(\n        typeof ForgeVTT !== \"undefined\" && ForgeVTT.usingTheForge ? \"forge-bazaar\" : \"data\",\n        music_folder\n    );\n    const files = folder.files;\n    const animations = files.filter((file) => file.endsWith(\".webm\"));\n    const tiles = files.filter((file) => file.endsWith(\".webp\"));\n    const canvasCenterWidth = canvas.dimensions.width / 2;\n    const canvasCenterHeight = canvas.dimensions.height / 2;\n\n    const playerJournalName = \"PlayerEntry\";\n    const gmJournalName = \"GM Solution\";\n\n    // shorthand for getting the name of the note without the path\n    const getNoteName = (tile) => tile.replace(music_folder, \"\").replace(\".webp\", \"\").replace(\"/\", \"\");\n    // create our folder with flag for cleanup\n    const jb2aFolder = await Folder.create([\n        {\n            name: \"JB2A - Puzzle Journals\",\n            type: \"JournalEntry\",\n            \"flags.jb2a_puzzle.delete\": true,\n        },\n    ]);\n    // create necessary JournalEntries\n    await JournalEntry.create([\n        {\n            name: playerJournalName,\n            folder: jb2aFolder[0].id,\n            \"flags.jb2a_puzzle.delete\": true,\n        },\n        {\n            name: gmJournalName,\n            folder: jb2aFolder[0].id,\n            \"flags.jb2a_puzzle.delete\": true,\n        },\n    ]);\n\n    let positionArray = [\n        [-100, -1000],\n        [100, -1000],\n        [100, -400],\n        [-100, -400],\n        [-200, -1100],\n        [200, -1100],\n        [200, -300],\n        [-200, -300],\n        [-300, -1200],\n        [300, -1200],\n        [300, -200],\n        [-300, -200],\n        [-400, -900],\n        [400, -900],\n        [400, -500],\n        [-400, -500],\n        [-500, -1000],\n        [500, -1000],\n        [500, -400],\n        [-500, -400],\n        [-500, -1200],\n        [500, -1200],\n        [500, -200],\n        [-500, -200],\n        [-300, -800],\n        [300, -800],\n        [300, -600],\n        [-300, -600],\n    ];\n\n    let tileData = [];\n    let macroData = [];\n    // assemble the tiles and macros with as much info as possible\n    tiles.forEach((tile, i) => {\n        const name = getNoteName(tile);\n        // tile is the filename for the webp\n        // i is the index\n        const tData = {\n            texture: {\n                src: tile,\n            },\n            height: 100,\n            width: 100,\n            x: canvasCenterWidth + positionArray[i][0],\n            y: canvasCenterWidth + positionArray[i][1],\n            \"flags.monks-active-tiles\": {\n                active: true,\n                chance: 100,\n                controlled: \"all\",\n                history: {},\n                minrequired: 0,\n                pertoken: false,\n                restriction: \"all\",\n                trigger: \"enter\",\n            },\n            \"flags.tagger.tags\": [name, \"jb2a_puzzle\"],\n        };\n\n        const animation = animations[i];\n\n        // this macro will find the note and play its respective animation at the tile location\n        // it will also update the playerJournal with the new note\n        const mData = {\n            name: getNoteName(tile),\n            img: tile,\n            type: \"script\",\n            scope: \"global\",\n            command: `\n                const tTile = Tagger.getByTag(\"${name}\")[0];\n                const scale = ((tTile.width + tTile.height)/2)/ 100;\n                new Sequence()\n                    .effect()\n                        .atLocation(tTile, {offset: {x: 0, y: scale * -100}})\n                        .file(\"${animation}\")\n                        .scale(scale)\n                    .play()\n                    \n\n                //Class=\"secret means that this text/image will be only visible to the GM\"\n                const content = \"<img src = ${tile} width = 100 /> \";\n                const journal = game.journal.getName(\"${playerJournalName}\");\n                const jPage = journal.pages.getName(\"${playerJournalName}\");\n                //Here, we add text to the Journal Entry\n                //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n                jPage.update({\"text.content\": jPage.text.content + content});\n        `,\n            author: game.user.id,\n            \"flags.jb2a_puzzle.delete\": true,\n        };\n\n        macroData.push(mData);\n        tileData.push(tData);\n    });\n    // create all the tiles we need\n    await canvas.scene.createEmbeddedDocuments(\"Tile\", [\n        // These are all of the musical notes\n        ...tileData,\n        // This is a specially crafted pressure plate tile\n        {\n            texture: {\n                src: \"icons/environment/traps/pressure-plate.webp\",\n            },\n            height: 100,\n            width: 100,\n            x: canvasCenterWidth,\n            y: canvasCenterHeight,\n            \"flags.monks-active-tiles\": {\n                active: true,\n                actions: [\n                    {\n                        action: \"runmacro\",\n                        delay: 0,\n                        id: foundry.utils.randomID(16),\n                        data: {\n                            // If you change the name of the pressure plate macro\n                            // be sure to change it here too\n                            macroid: game.macros.getName(\"JB2A - Pressure Plate\").id,\n                            runasgm: \"gm\",\n                            entity: {\n                                id: \"Macro.\" + game.macros.getName(\"JB2A - Pressure Plate\").id,\n                                name: \"JB2A - Pressure Plate\",\n                            },\n                        },\n                    },\n                ],\n                chance: 100,\n                controlled: \"all\",\n                history: {},\n                minrequired: 0,\n                pertoken: false,\n                restriction: \"all\",\n                trigger: \"enter\",\n            },\n            // pressure-plate tag is used for finding the pressure plate (used for coords of sequencer effects)\n            // jb2a_puzzle for cleanup\n            \"flags.tagger.tags\": [\"jb2a-puzzle-pressure-plate\", \"jb2a_puzzle\"],\n        },\n    ]);\n    // create all the Macros\n    await Macro.createDocuments(macroData);\n\n    const tileMacroData = tiles.map((tile, i) => {\n        // this is the actual tile document's id\n        const cTile = canvas.scene.tiles.find((t) => t.texture.src === tile);\n        // assemble our needed changes\n        const changes = {\n            _id: cTile.id,\n            \"flags.monks-active-tiles.actions\": [\n                {\n                    action: \"runmacro\",\n                    delay: 0,\n                    id: foundry.utils.randomID(16),\n                    data: {\n                        macroid: game.macros.getName(getNoteName(tile)).id,\n                        runasgm: \"gm\",\n                        entity: {\n                            id: \"Macro.\" + game.macros.getName(getNoteName(tile)).id,\n                            name: tile,\n                        },\n                    },\n                },\n            ],\n        };\n\n        return changes;\n    });\n\n    await canvas.scene.updateEmbeddedDocuments(\"Tile\", tileMacroData);\n}","flags":{"core":{"sourceId":"Macro.vZATHsSTh2TtH6dc"}},"ownership":{"default":0,"vCHRdUiE5wlwsA3z":3,"aGxss9fSYid62f18":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.2","coreVersion":"10.284","createdTime":1667518541282,"modifiedTime":1667533147074,"lastModifiedBy":"aGxss9fSYid62f18"},"folder":null,"sort":0,"_id":"NkW95Mp4DAm61RsU"}
{"name":"JB2A - Pressure Plate","type":"script","author":"aGxss9fSYid62f18","img":"icons/environment/traps/pressure-plate.webp","scope":"global","command":"const music_folder = \"modules/jb2a_patreon/Library/Generic/Music_Notation\";\nconst folder = await FilePicker.browse(\n    typeof ForgeVTT !== \"undefined\" && ForgeVTT.usingTheForge ? \"forge-bazaar\" : \"data\",\n    music_folder\n);\nconst files = folder.files;\nconst animations = files.filter((file) => file.endsWith(\".webm\"));\nconst tiles = files.filter((file) => file.endsWith(\".webp\"));\n\nconst pressurePlate = Tagger.getByTag(\"jb2a-puzzle-pressure-plate\")[0];\nconst journalGM = game.journal.getName(\"GM Solution\");\nconst journalPlayer = game.journal.getName(\"PlayerEntry\");\n\nlet pageGM = journalGM.pages.getName(\"GM Solution\");\nif (pageGM === undefined) {\n    await journalGM.createEmbeddedDocuments(\"JournalEntryPage\", [{ name: \"GM Solution\" }]);\n}\n\nlet pagePlayer = journalPlayer.pages.getName(\"PlayerEntry\");\nif (pagePlayer === undefined) {\n    await journalPlayer.createEmbeddedDocuments(\"JournalEntryPage\", [{ name: \"PlayerEntry\" }]);\n}\n\npageGM = journalGM.pages.getName(\"GM Solution\");\npagePlayer = journalPlayer.pages.getName(\"PlayerEntry\");\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay));\n\n// only execute if the pagePlayer has the same note-code as the solution\nif (pageGM.text.content === pagePlayer.text.content) {\n    // Open the doors\n    // IMPORTANT: You must assign the doors the tag below for them to be toggled. By default it's `jb2a-door`\n    const doors = Tagger.getByTag(\"jb2a-door\");\n    let doorUpdates = doors.map((door) => ({ _id: door.id, ds: 1 }));\n    await canvas.scene.updateEmbeddedDocuments(\"Wall\", doorUpdates);\n\n    //This is the countdown timer section\n    pagePlayer.update({ text: { content: `<h1>You have 5 seconds to exit the chamber</h1>` } });\n    //We set an await, a delay in milliseconds, 1000 will roughly be equivalent to 1 second.\n    await wait(2000);\n    pagePlayer.update({ text: { content: `<h1>4</h1>` } });\n    await wait(1000);\n    pagePlayer.update({ text: { content: `<h1>3</h1>` } });\n    await wait(1000);\n    pagePlayer.update({ text: { content: `<h1>2</h1>` } });\n    await wait(1000);\n    pagePlayer.update({ text: { content: `<h1>1</h1>` } });\n    await wait(1000);\n    pagePlayer.update({ text: { content: `<h1>0</h1>` } });\n    await wait(1000);\n    pagePlayer.update({ text: { content: ` ` } });\n    // Close the doors\n    doorUpdates = doors.map((door) => ({ _id: door.id, ds: 0 }));\n    await canvas.scene.updateEmbeddedDocuments(\"Wall\", doorUpdates);\n}\n// this executes regardless if we matched or not\n// at this point we reset the pattern\npagePlayer.update({ \"text.content\": `` });\n\nlet chosenTiles = [];\n\n// One of the Bass or BeamedQuaver\nchosenTiles.push(tiles.slice(0, 8)[Math.floor(Math.random() * 8)]);\n\n// One Flat or Crotchet\nchosenTiles.push(tiles.slice(8, 16)[Math.floor(Math.random() * 8)]);\n\n// Two Sharp or Treble Clef or Quavers\nchosenTiles.push(tiles.slice(16, 24)[Math.floor(Math.random() * 8)]);\n\nchosenTiles.push(tiles.slice(16, 24)[Math.floor(Math.random() * 8)]);\n\nlet newContent = \"\";\nconst cTile = pressurePlate;\nconst scale = (cTile.width + cTile.height) / 2 / 100;\n\n// assemble new solution\nchosenTiles.forEach((tile) => {\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = `<img src = ${tile} width = 100 />`;\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    newContent = newContent + content;\n});\n// update gm solution journal with new note-code\npageGM.update({ text: { content: newContent } });\n\n// play the solution\n// prettier-ignore\nnew Sequence()\n    .effect()\n        .atLocation(cTile, {offset: {x: 0, y: scale * -100}})\n        .file(animations[tiles.indexOf(chosenTiles[0])])\n        .scale(scale)\n    .wait(2000)\n    .effect()\n        .atLocation(cTile, {offset: {x: 0, y: scale * -100}})\n        .file(animations[tiles.indexOf(chosenTiles[1])])\n        .scale(scale)\n    .wait(2000)\n    .effect()\n        .atLocation(cTile, {offset: {x: 0, y: scale * -100}})\n        .file(animations[tiles.indexOf(chosenTiles[2])])\n        .scale(scale)\n    .wait(2000)\n    .effect()\n        .atLocation(cTile, {offset: {x: 0, y: scale * -100}})\n        .file(animations[tiles.indexOf(chosenTiles[3])])\n        .scale(scale)\n    .play();","flags":{"core":{"sourceId":"Macro.XxGiV3Gaz2U5ZjMX"}},"ownership":{"default":0,"vCHRdUiE5wlwsA3z":3,"aGxss9fSYid62f18":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.2","coreVersion":"10.284","createdTime":1667518544046,"modifiedTime":1667533148468,"lastModifiedBy":"aGxss9fSYid62f18"},"folder":null,"sort":0,"_id":"SeLn9qTH2d6ZF7Xe"}
{"name":"JB2A - Puzzle Cleanup","type":"script","author":"aGxss9fSYid62f18","img":"icons/svg/bones.svg","scope":"global","command":"// for macros, journals, and folders filter by our cleanup flag\nconst macros = game.macros\n    .filter((macro) => macro.data.flags.jb2a_puzzle?.delete === true)\n    .map((document) => document.id);\nconst journals = game.journal\n    .filter((journal) => journal.data.flags.jb2a_puzzle?.delete === true)\n    .map((document) => document.id);\nconst folders = game.folders\n    .filter((folder) => folder.data.flags.jb2a_puzzle?.delete === true)\n    .map((document) => document.id);\n// for tiles we can just use tagger to filter\nconst tiles = Tagger.getByTag(\"jb2a_puzzle\").map((document) => document.id);\n// mass delete everything that matched\nawait Macro.deleteDocuments(macros);\nawait Folder.deleteDocuments(folders);\nawait JournalEntry.deleteDocuments(journals);\nawait canvas.scene.deleteEmbeddedDocuments(\"Tile\", tiles);","flags":{"core":{"sourceId":"Macro.4f3BDboC8Lb3ZRZe"}},"ownership":{"default":0,"vCHRdUiE5wlwsA3z":3,"aGxss9fSYid62f18":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.2","coreVersion":"10.284","createdTime":1667518545628,"modifiedTime":1667533150590,"lastModifiedBy":"aGxss9fSYid62f18"},"folder":null,"sort":0,"_id":"d7yQpyieAWuQahYm"}
